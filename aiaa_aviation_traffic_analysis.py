# -*- coding: utf-8 -*-
"""AIAA Aviation Traffic Analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BiTkGBWq84NihYr-qNURSJPsZHtZur3N
"""

import pandas as pd
import matplotlib.pyplot as plt
from shapely.geometry import LineString, Point
import seaborn as sns

# Load CSV
df = pd.read_csv("/content/bay_area_flight_log.csv")
df = df[df["latitude"].notna() & df["longitude"].notna() & df["geo_altitude"].notna()]
df["alt_ft"] = df["geo_altitude"] * 3.28084
df["timestamp"] = pd.to_datetime(df["timestamp"], unit="s")
time_range_hrs = (df["timestamp"].max() - df["timestamp"].min()).total_seconds() / 3600.0

LOGGING_INTERVAL_SEC = 30

# Scoring weights
WEIGHTS = {
    "density": 26.5,
    "duration": 299,
    "unique": 2.6
}

# Define routes
routes = {
    "HILL": [
        {'start': {'lat': 37.4263, 'lon': -122.1455}, 'end': {'lat': 37.5789, 'lon': -121.9457}, 'alt_min_ft': 1000, 'alt_max_ft': 3000, 'width_nm': 10},
        {'start': {'lat': 37.5789, 'lon': -121.9457}, 'end': {'lat': 37.6841, 'lon': -122.1232}, 'alt_min_ft': 1000, 'alt_max_ft': 3000, 'width_nm': 10},
        {'start': {'lat': 37.6841, 'lon': -122.1232}, 'end': {'lat': 37.8715, 'lon': -122.2727}, 'alt_min_ft': 1000, 'alt_max_ft': 3000, 'width_nm': 10}
    ],
    "BAY": [
        {'start': {'lat': 37.4177, 'lon': -122.1127}, 'end': {'lat': 37.7200, 'lon': -122.2167}, 'alt_min_ft': 500, 'alt_max_ft': 2500, 'width_nm': 10},
        {'start': {'lat': 37.7200, 'lon': -122.2167}, 'end': {'lat': 37.7516, 'lon': -122.2005}, 'alt_min_ft': 500, 'alt_max_ft': 2500, 'width_nm': 10},
        {'start': {'lat': 37.7516, 'lon': -122.2005}, 'end': {'lat': 37.8715, 'lon': -122.2727}, 'alt_min_ft': 500, 'alt_max_ft': 2500, 'width_nm': 10}
    ],
    "CORRIDOR": [
        {'start': {'lat': 37.4177, 'lon': -122.1127}, 'end': {'lat': 37.7200, 'lon': -122.2167}, 'alt_min_ft': 0, 'alt_max_ft': 2000, 'width_nm': 10},
        {'start': {'lat': 37.7200, 'lon': -122.2167}, 'end': {'lat': 37.8070, 'lon': -122.3085}, 'alt_min_ft': 0, 'alt_max_ft': 2000, 'width_nm': 10},
        {'start': {'lat': 37.8070, 'lon': -122.3085}, 'end': {'lat': 37.8715, 'lon': -122.2727}, 'alt_min_ft': 0, 'alt_max_ft': 2000, 'width_nm': 10}
    ],
    "SF": [
        {'start': {'lat': 37.4082, 'lon': -122.1821}, 'end': {'lat': 37.5216, 'lon': -122.2653}, 'alt_min_ft': 1500, 'alt_max_ft': 3500, 'width_nm': 10},
        {'start': {'lat': 37.5216, 'lon': -122.2653}, 'end': {'lat': 37.6018, 'lon': -122.3430}, 'alt_min_ft': 1500, 'alt_max_ft': 3500, 'width_nm': 10},
        {'start': {'lat': 37.6018, 'lon': -122.3430}, 'end': {'lat': 37.6437, 'lon': -122.3797}, 'alt_min_ft': 1500, 'alt_max_ft': 3500, 'width_nm': 10},
        {'start': {'lat': 37.6437, 'lon': -122.3797}, 'end': {'lat': 37.6815, 'lon': -122.3992}, 'alt_min_ft': 1500, 'alt_max_ft': 3500, 'width_nm': 10},
        {'start': {'lat': 37.6815, 'lon': -122.3992}, 'end': {'lat': 37.7529, 'lon': -122.3183}, 'alt_min_ft': 1500, 'alt_max_ft': 3500, 'width_nm': 10},
        {'start': {'lat': 37.7529, 'lon': -122.3183}, 'end': {'lat': 37.8715, 'lon': -122.2727}, 'alt_min_ft': 1500, 'alt_max_ft': 3500, 'width_nm': 10}
    ]
}

def is_point_in_segment(row, segment):
    p = Point(row["longitude"], row["latitude"])
    line = LineString([(segment["start"]["lon"], segment["start"]["lat"]),
                       (segment["end"]["lon"], segment["end"]["lat"])])
    dist_nm = p.distance(line) * 60  # degrees to NM
    alt_ok = segment["alt_min_ft"] <= row["alt_ft"] <= segment["alt_max_ft"]
    return dist_nm <= (segment["width_nm"] / 2.0) and alt_ok

# Analyze
scores = []

for route_name, segments in routes.items():
    mask = pd.Series(False, index=df.index)
    for seg in segments:
        seg_mask = df.apply(lambda row: is_point_in_segment(row, seg), axis=1)
        mask |= seg_mask

    df_route = df[mask]
    aircraft_counts = df_route["icao24"].value_counts()
    density = len(df_route) / time_range_hrs
    avg_duration = aircraft_counts.mean() * LOGGING_INTERVAL_SEC / 60.0  # convert to minutes
    unique_aircraft = aircraft_counts.count()

    # Weighted congestion score
    score = (WEIGHTS["density"] * density +
             WEIGHTS["duration"] * avg_duration +
             WEIGHTS["unique"] * unique_aircraft)

    scores.append({
        "Route": route_name,
        "Aircraft / Hour": round(density, 2),
        "Avg Duration (min)": round(avg_duration, 2),
        "Unique Aircraft": unique_aircraft,
        "Congestion Score": round(score, 2)
    })

# Display results
score_df = pd.DataFrame(scores)
print(score_df)

# Plot

fig, axs = plt.subplots(1, 4, figsize=(22, 5))

sns.barplot(data=score_df, x='Route', y='Aircraft / Hour', ax=axs[0], color='skyblue')
axs[0].set_title("Aircraft Density per Hour")
axs[0].set_ylabel("Aircraft / Hour")

sns.barplot(data=score_df, x='Route', y='Avg Duration (min)', ax=axs[1], color='lightgreen')
axs[1].set_title("Avg Duration per Aircraft")
axs[1].set_ylabel("Minutes")

sns.barplot(data=score_df, x='Route', y='Unique Aircraft', ax=axs[2], color='salmon')
axs[2].set_title("Unique Aircraft Count")
axs[2].set_ylabel("Aircraft")

sns.barplot(data=score_df, x='Route', y='Congestion Score', ax=axs[3], color='plum')
axs[3].set_title("Final Congestion Score (Weighted)")
axs[3].set_ylabel("Unitless Score")

plt.tight_layout()
plt.show()

from google.colab import drive
drive.mount('/content/drive')